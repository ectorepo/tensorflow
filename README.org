#+title:     Ectorepo: Tensorflow
#+author:    David Conner
#+email:     noreply@te.xel.io

A list of Tensorflow and Python ML tools.To learn how to use this Repo repo, see
the [[https://github.com/ectorepo/ectorepo][ectorepo/ectorepo]] Repo ... repo.

#+begin_src xml :tangle default.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest>
  <include name="_remotes.xml"/>
  <default remote="github" sync-j="8" revision="refs/heads/master"/>
  <include name="tensorflow_core.xml"/>
</manifest>
#+end_src

Check rates:

#+begin_src emacs-lisp :results value code :exports code
(ghub-graphql-rate-limit)
#+end_src

To avoid confirmations

#+begin_src emacs-lisp
(setq-local org-confirm-babel-evaluate nil)
#+end_src

* Core

#+name: nrepos
#+begin_src emacs-lisp
100
#+end_src

#+RESULTS: nrepos
: 100

Get the core repositories. These should go into =/data/ecto/tensorflow/core=.

#+name: tensorflow-repos
#+begin_src emacs-lisp :var nrepos=200 :results replace vector value :exports code :noweb yes
(ghub-graphql
 (graphql-query ((organization
                  :arguments ((login . "tensorflow"))
                  (repositories
                   :arguments ((first . <<nrepos()>>)
                               (orderBy . ((field . UPDATED_AT)
                                           (direction . DESC))))
                   (edges
                    (node (owner login)
                          name
                          (defaultBranchRef prefix name)
                          url
                          updatedAt
                          isArchived)))))))
#+end_src

Filter the results, generate XML

#+name: tensorflow-core
#+begin_src emacs-lisp :var gqldata=tensorflow-repos :results value html
(thread-first
  (thread-last
    (a-get* (nthcdr 0 gqldata) 'data 'organization 'repositories 'edges)
    (mapcar (lambda (el) (a-get* el 'node)))
    (seq-filter (lambda (el) (not (a-get* el 'isArchived))))
    (mapcar (lambda (el)
              (let* (;; (defaultBranchRef (a-get* 'defaultBranchRef))
                     (path (a-get* el 'name))
                     (ref (concat (a-get* el 'defaultBranchRef 'prefix)
                                  (a-get* el 'defaultBranchRef 'name)))
                     (name (string-join (list (a-get* el 'owner 'login)
                                              (a-get* el 'name)) "/")))
                (concat "<project"
                        " name=\"" name
                        "\" path=\"" path
                        "\" revision=\"" ref "\" remote=\"github\"/>")))))
  (cl-sort 'string-lessp :key 'downcase)
  (string-join "\n"))
#+end_src

#+RESULTS: tensorflow-core
#+begin_export html
<project name="tensorflow/build" path="build" ref="refs/heads/master" remote="github" />
<project name="tensorflow/docs-l10n" path="docs-l10n" ref="refs/heads/master" remote="github" />
<project name="tensorflow/ecosystem" path="ecosystem" ref="refs/heads/master" remote="github" />
<project name="tensorflow/federated" path="federated" ref="refs/heads/main" remote="github" />
<project name="tensorflow/io" path="io" ref="refs/heads/master" remote="github" />
<project name="tensorflow/lucid" path="lucid" ref="refs/heads/master" remote="github" />
<project name="tensorflow/model-optimization" path="model-optimization" ref="refs/heads/master" remote="github" />
<project name="tensorflow/models" path="models" ref="refs/heads/master" remote="github" />
<project name="tensorflow/nmt" path="nmt" ref="refs/heads/master" remote="github" />
<project name="tensorflow/playground" path="playground" ref="refs/heads/master" remote="github" />
<project name="tensorflow/recommenders" path="recommenders" ref="refs/heads/main" remote="github" />
<project name="tensorflow/similarity" path="similarity" ref="refs/heads/master" remote="github" />
<project name="tensorflow/tensor2tensor" path="tensor2tensor" ref="refs/heads/master" remote="github" />
<project name="tensorflow/tensorflow" path="tensorflow" ref="refs/heads/master" remote="github" />
<project name="tensorflow/text" path="text" ref="refs/heads/master" remote="github" />
<project name="tensorflow/tfjs" path="tfjs" ref="refs/heads/master" remote="github" />
<project name="tensorflow/tfjs-models" path="tfjs-models" ref="refs/heads/master" remote="github" />
<project name="tensorflow/tflite-micro" path="tflite-micro" ref="refs/heads/main" remote="github" />
<project name="tensorflow/tflite-support" path="tflite-support" ref="refs/heads/master" remote="github" />
<project name="tensorflow/transform" path="transform" ref="refs/heads/master" remote="github" />
#+end_export

Generate =tensorflow_core.xml=

#+begin_src xml :tangle tensorflow_core.xml :noweb yes
<?xml version="1.0" encoding="utf-8"?>
<manifest>
  <<tensorflow-core()>>
</manifest>
#+end_src
